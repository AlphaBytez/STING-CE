#!/usr/bin/env python3

"""
Create a new passwordless admin account from scratch
"""

import json
import requests
import sys
from urllib3.exceptions import InsecureRequestWarning

# Disable SSL warnings for development
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

import os
KRATOS_ADMIN_URL = os.getenv("KRATOS_ADMIN_URL", "https://kratos:4434")

def create_passwordless_admin(email="admin.passwordless@sting.local"):
    """Create a new admin account with only passwordless credentials"""
    try:
        # Prepare identity data WITHOUT explicit credentials
        # Kratos will enable methods based on configuration (code, webauthn, totp)
        identity_data = {
            "schema_id": "default",
            "traits": {
                "email": email,
                "name": {
                    "first": "Passwordless",
                    "last": "Admin"
                },
                "role": "admin",
                "force_password_change": False
            }
            # No credentials specified - Kratos will use available methods from config
        }
        
        print(f"🔐 Creating passwordless admin account: {email}")
        print(f"📋 Configuring code method for email authentication")
        
        # Create the identity
        response = requests.post(
            f"{KRATOS_ADMIN_URL}/admin/identities",
            json=identity_data,
            verify=False
        )
        
        if response.status_code == 201:
            result = response.json()
            print(f"✅ Successfully created passwordless admin account!")
            print(f"   ID: {result['id']}")
            print(f"   Email: {result['traits']['email']}")
            print(f"   Credentials: {list(result.get('credentials', {}).keys())}")
            
            # Verify the code method is configured
            if 'code' in result.get('credentials', {}):
                print(f"   ✅ Code authentication method configured")
            else:
                print(f"   ⚠️ Warning: Code method may not be configured")
            
            return result['id']
        else:
            print(f"❌ Failed to create admin account")
            print(f"   Status: {response.status_code}")
            print(f"   Response: {response.text}")
            return None
            
    except Exception as e:
        print(f"❌ Error creating passwordless admin: {e}")
        return None

def delete_old_admin(email="mr.olliec@gmail.com"):
    """Delete the old admin account"""
    try:
        # Get all identities
        response = requests.get(
            f"{KRATOS_ADMIN_URL}/admin/identities",
            verify=False
        )
        response.raise_for_status()
        identities = response.json()
        
        # Find the old admin
        for identity in identities:
            if identity.get('traits', {}).get('email') == email:
                print(f"🗑️ Deleting old admin account: {email}")
                
                delete_response = requests.delete(
                    f"{KRATOS_ADMIN_URL}/admin/identities/{identity['id']}",
                    verify=False
                )
                
                if delete_response.status_code == 204:
                    print(f"✅ Successfully deleted old admin account")
                    return True
                else:
                    print(f"❌ Failed to delete old admin account")
                    print(f"   Status: {delete_response.status_code}")
                    return False
        
        print(f"⚠️ Old admin account not found: {email}")
        return True
        
    except Exception as e:
        print(f"❌ Error deleting old admin: {e}")
        return False

def main():
    """Main function"""
    print("🔄 Creating fresh passwordless admin account...")
    
    # Create new passwordless admin (keep old one for now)
    new_admin_id = create_passwordless_admin()
    
    if new_admin_id:
        print(f"\n🎉 Passwordless admin account created successfully!")
        print(f"\n📧 Login with: admin.passwordless@sting.local")
        print(f"🔐 Authentication methods: Email codes only (passwordless)")
        print(f"\n🧪 Test this account in the login flow to verify passwordless works!")
    else:
        print(f"\n❌ Failed to create passwordless admin account")
        sys.exit(1)

if __name__ == "__main__":
    main()