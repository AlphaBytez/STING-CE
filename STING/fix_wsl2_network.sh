#!/usr/bin/env bash
#
# WSL2 Network Diagnostic and Repair Tool
# Fixes the virtual network bridge between Windows and WSL2
#

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}ℹ${NC} $1"; }
log_success() { echo -e "${GREEN}✓${NC} $1"; }
log_warning() { echo -e "${YELLOW}⚠${NC} $1"; }
log_error() { echo -e "${RED}✗${NC} $1"; }

echo ""
echo "╔════════════════════════════════════════════╗"
echo "║   WSL2 Network Diagnostic & Repair Tool    ║"
echo "╚════════════════════════════════════════════╝"
echo ""

# Check if running on WSL
if ! grep -qi microsoft /proc/version 2>/dev/null; then
    log_error "This script must be run from WSL2"
    exit 1
fi

log_success "Running on WSL2"
echo ""

# Phase 1: Diagnostics
log_info "Phase 1: Network Diagnostics"
echo "================================"
echo ""

# Test 1: IP connectivity (no DNS)
log_info "Test 1: IP Connectivity (bypass DNS)"
if timeout 5 ping -c 1 8.8.8.8 >/dev/null 2>&1; then
    log_success "Can reach 8.8.8.8 (Google DNS)"
    IP_WORKS=true
else
    log_error "Cannot reach 8.8.8.8 - IP connectivity is broken"
    IP_WORKS=false
fi

# Test 2: DNS resolution
log_info "Test 2: DNS Resolution"
if getent hosts google.com >/dev/null 2>&1; then
    log_success "DNS resolution works"
    DNS_WORKS=true
else
    log_error "DNS resolution is broken"
    DNS_WORKS=false
fi

# Test 3: Check resolv.conf
log_info "Test 3: Checking /etc/resolv.conf"
if [ -f /etc/resolv.conf ]; then
    log_info "Current DNS servers:"
    grep "^nameserver" /etc/resolv.conf | while read -r line; do
        echo "  $line"
    done
else
    log_error "/etc/resolv.conf not found"
fi

# Test 4: Check network interfaces
log_info "Test 4: Network Interfaces"
if ip addr show eth0 >/dev/null 2>&1; then
    IP_ADDR=$(ip addr show eth0 | grep "inet " | awk '{print $2}')
    log_success "eth0 interface exists: $IP_ADDR"
else
    log_error "eth0 interface not found"
fi

# Test 5: Check default route
log_info "Test 5: Default Route"
if ip route show default >/dev/null 2>&1; then
    GATEWAY=$(ip route show default | awk '{print $3}')
    log_success "Default gateway: $GATEWAY"
    
    # Test gateway reachability
    if timeout 5 ping -c 1 "$GATEWAY" >/dev/null 2>&1; then
        log_success "Gateway is reachable"
    else
        log_error "Gateway is NOT reachable"
    fi
else
    log_error "No default route found"
fi

echo ""
log_info "Phase 2: Applying Fixes"
echo "================================"
echo ""

# Fix 1: Configure DNS
if [ "$DNS_WORKS" = false ] || [ "$IP_WORKS" = false ]; then
    log_info "Fix 1: Configuring DNS"
    
    # Backup existing resolv.conf
    if [ -f /etc/resolv.conf ]; then
        sudo cp /etc/resolv.conf /etc/resolv.conf.backup.$(date +%s) 2>/dev/null || true
        log_info "Backed up /etc/resolv.conf"
    fi
    
    # Remove immutable flag
    sudo chattr -i /etc/resolv.conf 2>/dev/null || true
    
    # Write new resolv.conf
    cat <<EOF | sudo tee /etc/resolv.conf >/dev/null
# Generated by WSL2 network fix script
# Multiple DNS servers for redundancy
nameserver 8.8.8.8
nameserver 8.8.4.4
nameserver 1.1.1.1
nameserver 1.0.0.1
EOF
    
    log_success "Updated /etc/resolv.conf with public DNS servers"
    
    # Make immutable (prevent WSL from overwriting)
    if sudo chattr +i /etc/resolv.conf 2>/dev/null; then
        log_success "Made /etc/resolv.conf immutable"
    else
        log_warning "Could not make /etc/resolv.conf immutable (chattr not available)"
    fi
fi

# Fix 2: Configure WSL to not auto-generate resolv.conf
log_info "Fix 2: Configuring /etc/wsl.conf"

if [ ! -f /etc/wsl.conf ] || ! grep -q "generateResolvConf" /etc/wsl.conf 2>/dev/null; then
    # Backup if exists
    if [ -f /etc/wsl.conf ]; then
        sudo cp /etc/wsl.conf /etc/wsl.conf.backup.$(date +%s) 2>/dev/null || true
    fi
    
    # Create or update wsl.conf
    if [ ! -f /etc/wsl.conf ]; then
        cat <<EOF | sudo tee /etc/wsl.conf >/dev/null
[network]
generateResolvConf = false

[boot]
systemd = true
EOF
        log_success "Created /etc/wsl.conf"
    else
        # Add network section if missing
        if ! grep -q "\[network\]" /etc/wsl.conf; then
            echo "" | sudo tee -a /etc/wsl.conf >/dev/null
            echo "[network]" | sudo tee -a /etc/wsl.conf >/dev/null
        fi
        
        # Add generateResolvConf if missing
        if ! grep -q "generateResolvConf" /etc/wsl.conf; then
            echo "generateResolvConf = false" | sudo tee -a /etc/wsl.conf >/dev/null
        fi
        
        log_success "Updated /etc/wsl.conf"
    fi
else
    log_success "/etc/wsl.conf already configured"
fi

# Fix 3: MTU settings (sometimes helps with connectivity)
log_info "Fix 3: Checking MTU settings"
CURRENT_MTU=$(ip link show eth0 | grep -oP 'mtu \K\d+' || echo "unknown")
log_info "Current MTU: $CURRENT_MTU"

if [ "$CURRENT_MTU" != "1500" ] && [ "$CURRENT_MTU" != "unknown" ]; then
    log_info "Setting MTU to 1500..."
    sudo ip link set dev eth0 mtu 1500 2>/dev/null || {
        log_warning "Could not set MTU (may require WSL restart)"
    }
fi

echo ""
log_info "Phase 3: Verification"
echo "================================"
echo ""

# Wait a moment for changes to take effect
sleep 2

# Re-test connectivity
log_info "Re-testing network connectivity..."
echo ""

FIXED=true

# Test IP connectivity
log_info "Testing IP connectivity..."
if timeout 5 ping -c 2 8.8.8.8 >/dev/null 2>&1; then
    log_success "✅ IP connectivity works"
else
    log_error "❌ IP connectivity still broken"
    FIXED=false
fi

# Test DNS
log_info "Testing DNS resolution..."
if getent hosts google.com >/dev/null 2>&1; then
    log_success "✅ DNS resolution works"
else
    log_error "❌ DNS resolution still broken"
    FIXED=false
fi

# Test HTTPS connectivity
log_info "Testing HTTPS connectivity..."
if timeout 10 curl -s https://www.google.com >/dev/null 2>&1; then
    log_success "✅ HTTPS connectivity works"
else
    log_error "❌ HTTPS connectivity still broken"
    FIXED=false
fi

echo ""
if [ "$FIXED" = true ]; then
    log_success "╔════════════════════════════════════════╗"
    log_success "║  ✅ Network connectivity restored!     ║"
    log_success "╚════════════════════════════════════════╝"
    echo ""
    log_info "You can now proceed with STING installation"
    exit 0
else
    log_error "╔════════════════════════════════════════╗"
    log_error "║  ⚠️  Network issues persist            ║"
    log_error "╚════════════════════════════════════════╝"
    echo ""
    log_warning "The fixes were applied but network connectivity is still broken."
    echo ""
    log_info "Additional steps to try:"
    echo ""
    echo "1. Restart WSL from PowerShell (as Administrator):"
    echo "   wsl --shutdown"
    echo "   wsl"
    echo ""
    echo "2. Check Windows Firewall settings"
    echo "   - Disable firewall temporarily to test"
    echo "   - Add WSL2 network exception"
    echo ""
    echo "3. Check VPN software"
    echo "   - Some VPNs block WSL2 traffic"
    echo "   - Try disconnecting VPN temporarily"
    echo ""
    echo "4. Reset WSL2 network from PowerShell (as Administrator):"
    echo "   wsl --shutdown"
    echo "   netsh winsock reset"
    echo "   netsh int ip reset all"
    echo "   Restart-Computer"
    echo ""
    echo "5. Check Hyper-V network adapter (PowerShell as Admin):"
    echo "   Get-NetAdapter | Where-Object {\\$_.Name -like '*WSL*'}"
    echo "   Get-NetAdapter | Where-Object {\\$_.Name -like '*WSL*'} | Restart-NetAdapter"
    echo ""
    exit 1
fi
