# Multi-stage build for production React app with nginx
# Stage 1: Build the React application
FROM node:18.20.6-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for build)
RUN npm ci --no-audit --no-fund

# Copy source code
COPY . .

# Build the React app for production with absolute paths
ENV PUBLIC_URL=/
RUN npm run build

# Stage 2: Serve with nginx
FROM nginx:1.27-alpine

# Copy custom nginx config
COPY nginx.https.conf /etc/nginx/conf.d/default.conf

# Copy the built React app from builder stage
COPY --from=builder /app/build /usr/share/nginx/html

# Copy env.js update script for runtime configuration
COPY update-env.sh /docker-entrypoint.d/40-update-env.sh
RUN chmod +x /docker-entrypoint.d/40-update-env.sh

# Create a script to handle environment variables at runtime
RUN echo '#!/bin/sh' > /docker-entrypoint.d/50-env-subst.sh && \
    echo 'envsubst < /usr/share/nginx/html/index.html > /tmp/index.html && mv /tmp/index.html /usr/share/nginx/html/index.html' >> /docker-entrypoint.d/50-env-subst.sh && \
    chmod +x /docker-entrypoint.d/50-env-subst.sh

# Add wget for healthcheck
# WSL2 fix: Use HTTP instead of HTTPS for Alpine repos to avoid SSL issues
RUN sed -i 's/https/http/g' /etc/apk/repositories && \
    apk add --no-cache wget || \
    (echo "Retrying with update..." && apk update && apk add --no-cache wget)

# Expose port 80 (nginx default)
EXPOSE 80

# Healthcheck is defined in docker-compose.yml

# Nginx runs as daemon off by default in Docker
CMD ["nginx", "-g", "daemon off;"]