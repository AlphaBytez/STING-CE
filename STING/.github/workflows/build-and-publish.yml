name: Build and Publish Docker Images

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'latest'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/sting-ce

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          # Core application
          - name: app
            context: .
            dockerfile: Dockerfile
            platforms: linux/amd64,linux/arm64

          # Frontend
          - name: frontend
            context: ./frontend
            dockerfile: Dockerfile
            platforms: linux/amd64,linux/arm64

          # Workers and services
          - name: minimal-report-worker
            context: .
            dockerfile: Dockerfile.report-worker
            platforms: linux/amd64,linux/arm64

          - name: knowledge
            context: ./knowledge
            dockerfile: Dockerfile
            platforms: linux/amd64,linux/arm64

          - name: chatbot
            context: ./chatbot
            dockerfile: Dockerfile
            platforms: linux/amd64,linux/arm64

          - name: messaging
            context: ./messaging
            dockerfile: Dockerfile
            platforms: linux/amd64,linux/arm64

          - name: external-ai
            context: ./external_ai_service
            dockerfile: Dockerfile
            platforms: linux/amd64,linux/arm64

          - name: public-bee
            context: ./nectar_worker
            dockerfile: Dockerfile
            platforms: linux/amd64,linux/arm64

          # Utilities
          - name: vault
            context: ./vault
            dockerfile: Dockerfile-vault
            platforms: linux/amd64,linux/arm64

          - name: utils
            context: .
            dockerfile: Dockerfile.utils
            platforms: linux/amd64,linux/arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.name }}
          tags: |
            type=semver,pattern={{version}},value=v${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ steps.version.outputs.version }}
            type=semver,pattern={{major}},value=v${{ steps.version.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/${{ matrix.dockerfile }}
          platforms: ${{ matrix.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-version-file:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          VERSION=${VERSION#v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Update VERSION file
        run: |
          echo "${{ steps.version.outputs.version }}" > VERSION
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add VERSION
          git commit -m "chore: Update VERSION to ${{ steps.version.outputs.version }}" || echo "No changes to commit"
          git push || echo "No changes to push"

  create-release-summary:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'release'

    steps:
      - name: Add images to release notes
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ github.event.release.tag_name }}';
            const images = [
              'app', 'frontend', 'minimal-report-worker', 'knowledge',
              'chatbot', 'messaging', 'external-ai', 'public-bee',
              'vault', 'utils'
            ];

            let body = `## Docker Images Published\n\nAll images are available on GitHub Container Registry:\n\n`;

            images.forEach(image => {
              body += `- \`ghcr.io/${{ github.repository_owner }}/sting-ce-${image}:${version}\`\n`;
            });

            body += `\n## Installation\n\n`;
            body += `\`\`\`bash\n`;
            body += `# One-liner installation\n`;
            body += `curl -sSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | sudo bash\n\n`;
            body += `# Or upgrade existing installation\n`;
            body += `sudo msting upgrade --version=${version}\n`;
            body += `\`\`\`\n`;

            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: context.payload.release.body + '\n\n' + body
            });
