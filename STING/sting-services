#!/bin/bash
#
# STING Services Manager - Manages both LLM and Bee services
#

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Configuration
LLM_PORT="${NATIVE_LLM_PORT:-8086}"
BEE_PORT="${BEE_PORT:-8888}"
LOG_DIR="${HOME}/.sting-ce/logs"
PID_DIR="${HOME}/.sting-ce/pids"

# Create directories if needed
mkdir -p "$LOG_DIR" "$PID_DIR"

# Log function
log() {
    echo -e "${GREEN}[STING Services]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Kill processes on port
kill_port() {
    local port=$1
    local service=$2
    
    if lsof -ti:$port >/dev/null 2>&1; then
        log "Killing existing $service processes on port $port..."
        lsof -ti:$port | xargs kill -9 2>/dev/null || true
        sleep 1
    fi
}

# Start LLM service
start_llm() {
    log "Starting LLM service..."
    
    # Kill any existing processes
    kill_port $LLM_PORT "LLM"
    
    # Use sting-llm script
    ./sting-llm start
}

# Start Bee service
start_bee() {
    log "Starting Bee service..."
    
    # Kill any existing processes
    kill_port $BEE_PORT "Bee"
    
    # Set environment
    export PYTHONPATH="$SCRIPT_DIR"
    export NATIVE_LLM_URL="http://localhost:$LLM_PORT"
    export BEE_PORT=$BEE_PORT
    
    # Start Bee
    nohup python3 chatbot/bee_server_simple.py > "$LOG_DIR/bee.log" 2>&1 &
    echo $! > "$PID_DIR/bee.pid"
    
    log "Bee started with PID: $(cat $PID_DIR/bee.pid)"
    log "Bee logs: $LOG_DIR/bee.log"
}

# Stop LLM service
stop_llm() {
    log "Stopping LLM service..."
    ./sting-llm stop
}

# Stop Bee service
stop_bee() {
    log "Stopping Bee service..."
    
    if [ -f "$PID_DIR/bee.pid" ]; then
        PID=$(cat "$PID_DIR/bee.pid")
        if kill -0 "$PID" 2>/dev/null; then
            log "Stopping Bee (PID: $PID)..."
            kill "$PID"
            sleep 2
            if kill -0 "$PID" 2>/dev/null; then
                warning "Bee didn't stop gracefully, forcing..."
                kill -9 "$PID"
            fi
        fi
        rm -f "$PID_DIR/bee.pid"
    fi
    
    # Also kill by port as backup
    kill_port $BEE_PORT "Bee"
    
    log "Bee stopped"
}

# Check service status
check_status() {
    echo -e "\n${BLUE}=== STING Services Status ===${NC}\n"
    
    # Check LLM
    echo -e "${GREEN}LLM Service:${NC}"
    if curl -sf "http://localhost:$LLM_PORT/health" >/dev/null 2>&1; then
        echo "  ✅ Running on port $LLM_PORT"
        # Check loaded models
        models=$(curl -sf "http://localhost:$LLM_PORT/models" 2>/dev/null | python3 -c "import json, sys; data=json.load(sys.stdin); loaded=list(data.get('loaded_models', {}).keys()); print(', '.join(loaded) if loaded else 'None')" 2>/dev/null || echo "Unknown")
        echo "  📦 Loaded models: $models"
    else
        echo "  ❌ Not running"
    fi
    
    # Check Bee
    echo -e "\n${GREEN}Bee Service:${NC}"
    if curl -sf "http://localhost:$BEE_PORT/health" >/dev/null 2>&1; then
        echo "  ✅ Running on port $BEE_PORT"
        health=$(curl -sf "http://localhost:$BEE_PORT/health" | python3 -c "import json, sys; data=json.load(sys.stdin); print(f\"LLM connection: {'✅' if data.get('llm_service') else '❌'}\")" 2>/dev/null || echo "Unknown")
        echo "  $health"
    else
        echo "  ❌ Not running"
    fi
    
    echo ""
}

# Test the services
test_services() {
    log "Testing STING services..."
    
    # Test LLM
    echo -e "\n${GREEN}Testing LLM service...${NC}"
    response=$(curl -sf -X POST "http://localhost:$LLM_PORT/generate" \
        -H "Content-Type: application/json" \
        -d '{"message": "Hello", "model": "deepseek-1.5b", "max_tokens": 20}' \
        --max-time 10 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        echo "✅ LLM service is working"
        echo "Response preview: $(echo "$response" | python3 -c "import json, sys; print(json.load(sys.stdin).get('text', '')[:50] + '...')" 2>/dev/null || echo "Could not parse response")"
    else
        echo "❌ LLM service test failed"
    fi
    
    # Test Bee
    echo -e "\n${GREEN}Testing Bee service...${NC}"
    response=$(curl -sf -X POST "http://localhost:$BEE_PORT/chat/test" \
        -H "Content-Type: application/json" \
        -d '{"message": "What is STING?", "user_id": "test-user"}' \
        --max-time 20 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        echo "✅ Bee service is working"
        echo "Response preview: $(echo "$response" | python3 -c "import json, sys; print(json.load(sys.stdin).get('response', '')[:100] + '...')" 2>/dev/null || echo "Could not parse response")"
    else
        echo "❌ Bee service test failed"
    fi
}

# Main command handling
case "$1" in
    start)
        log "Starting all STING services..."
        start_llm
        sleep 5  # Give LLM time to start
        start_bee
        sleep 3  # Give Bee time to start
        check_status
        ;;
    stop)
        log "Stopping all STING services..."
        stop_bee
        stop_llm
        ;;
    restart)
        log "Restarting all STING services..."
        stop_bee
        stop_llm
        sleep 2
        start_llm
        sleep 5
        start_bee
        sleep 3
        check_status
        ;;
    status)
        check_status
        ;;
    test)
        test_services
        ;;
    logs)
        echo -e "${GREEN}Showing logs (Ctrl+C to exit)...${NC}\n"
        echo "=== LLM Service ==="
        tail -f "$LOG_DIR/llm-gateway.log" &
        LLM_TAIL_PID=$!
        echo -e "\n=== Bee Service ==="
        tail -f "$LOG_DIR/bee.log" &
        BEE_TAIL_PID=$!
        
        # Wait for Ctrl+C
        trap "kill $LLM_TAIL_PID $BEE_TAIL_PID 2>/dev/null; exit" INT
        wait
        ;;
    llm)
        # Pass through to sting-llm
        shift
        ./sting-llm "$@"
        ;;
    bee)
        # Bee-specific commands
        case "$2" in
            start)
                start_bee
                ;;
            stop)
                stop_bee
                ;;
            restart)
                stop_bee
                sleep 2
                start_bee
                ;;
            logs)
                tail -f "$LOG_DIR/bee.log"
                ;;
            *)
                echo "Usage: $0 bee {start|stop|restart|logs}"
                ;;
        esac
        ;;
    clean-ports)
        log "Cleaning up ports..."
        kill_port $LLM_PORT "LLM"
        kill_port $BEE_PORT "Bee"
        log "Ports cleaned"
        ;;
    *)
        echo "STING Services Manager"
        echo ""
        echo "Usage: $0 {start|stop|restart|status|test|logs|clean-ports}"
        echo ""
        echo "Commands:"
        echo "  start       - Start all services (LLM and Bee)"
        echo "  stop        - Stop all services"
        echo "  restart     - Restart all services"
        echo "  status      - Check service status"
        echo "  test        - Test both services"
        echo "  logs        - Show logs for both services"
        echo "  clean-ports - Kill all processes on service ports"
        echo ""
        echo "Service-specific commands:"
        echo "  $0 llm [command]   - Manage LLM service"
        echo "  $0 bee [command]   - Manage Bee service"
        echo ""
        echo "Configuration:"
        echo "  LLM Port: $LLM_PORT"
        echo "  Bee Port: $BEE_PORT"
        echo "  Logs: $LOG_DIR"
        exit 1
        ;;
esac