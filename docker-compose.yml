x-db-environment:
  POSTGRES_HOST: ${POSTGRES_HOST:-db}
  POSTGRES_PORT: ${POSTGRES_PORT:-5432}
  POSTGRES_DB: ${POSTGRES_DB:-sting_app}
  POSTGRES_USER: ${POSTGRES_USER:-postgres}
services:
  registry:
    image: registry:2
    container_name: sting-ce-registry
    ports:
      - "5000:5000"
    volumes:
      - registry_data:/var/lib/registry
    restart: always
  vault:
    container_name: sting-ce-vault
    build:
      context: ./vault
      dockerfile: Dockerfile-vault
    image: sting-ce-vault:latest
    cap_add:
    - IPC_LOCK
    env_file:
    - ${INSTALL_DIR}/env/vault.env
    environment:
      # Removed VAULT_DEV_* variables to enable persistent storage mode
      VAULT_ADDR: http://0.0.0.0:8200
      VAULT_API_ADDR: http://0.0.0.0:8200
      SKIP_SETCAP: 'true' 
    volumes:
    - config_data:/app/conf
    - vault_data:/vault/data
    - sting_logs:/var/log/sting
    - vault_file:/vault/file
    - vault_persistent:/vault/persistent
    networks:
    - sting_local
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD-SHELL", "VAULT_ADDR=http://localhost:8200 vault status >/dev/null 2>&1; ec=$$?; [ $$ec -eq 0 ] || [ $$ec -eq 2 ]"]
      interval: ${HEALTH_CHECK_INTERVAL:-10s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-5s}
      retries: 30
      start_period: ${HEALTH_CHECK_START_PERIOD:-30s}
  
    # Utils service - used for installation and development utilities
  utils:
    container_name: sting-ce-utils
    build:
      context: .
      dockerfile: Dockerfile.utils
    image: sting-ce-utils:latest
    env_file:
      - ${INSTALL_DIR}/env/vault.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-sting_app}
      POSTGRES_HOST: ${POSTGRES_HOST:-db}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      VAULT_ADDR: http://vault:8200
      # Legacy variables - kept as placeholders
      # ST_API_KEY: placeholder
      # ST_DASHBOARD_API_KEY: placeholder
    volumes:
      - .:/app
      - config_data:/app/conf
      - ./certs:/app/certs
    mem_limit: 256M
    cpus: 0.1
    mem_reservation: 64M
    networks:
      - sting_local
    healthcheck:
      test: ["CMD", "python3", "-c", "import hvac; import yaml; import requests"]
      interval: ${HEALTH_CHECK_INTERVAL:-5s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-3s}
      retries: 30
      start_period: ${HEALTH_CHECK_START_PERIOD:-20s}
    profiles:
      - installation
      - utils-tools

  db:
    container_name: sting-ce-db
    build:
      context: ./database
      dockerfile: Dockerfile-postgres
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRESQL_DATABASE_NAME:-sting_app}
      POSTGRES_USER: ${POSTGRESQL_USER:-postgres}
      POSTGRES_PASSWORD: "postgres"
      # PostgreSQL memory optimization
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 512MB
      POSTGRES_WORK_MEM: 8MB
      POSTGRES_MAINTENANCE_WORK_MEM: 64MB
      # Use md5 auth instead of scram-sha-256 for better compatibility
      POSTGRES_HOST_AUTH_METHOD: md5
      LANG: en_US.utf8
      LC_ALL: en_US.utf8
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
    env_file:
      - ${INSTALL_DIR}/env/db.env
    volumes:
      - sting-ce_postgres_data:/var/lib/postgresql/data
      - config_data:/app/conf
      - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
    networks:
      - sting_local
    ports:
      - 5433:5432
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 30
      start_period: 60s



  kratos:
    container_name: sting-ce-kratos
    image: oryd/kratos:v1.3.0
    # Load environment from generated env file
    env_file:
      - ${INSTALL_DIR}/env/kratos.env
      - ${INSTALL_DIR}/env/db.env
    environment:
      # Use dedicated kratos database with kratos_user for proper separation
      - DSN=postgresql://kratos_user:kratos_secure_password_change_me@db:5432/kratos?sslmode=disable
      # Make sure Kratos can be accessed by hostname from other containers
      - HOSTNAME=kratos
      # Email configuration will be loaded from kratos.env based on EMAIL_MODE
      # AAL2 session timeout - configurable for different security requirements
      - AAL2_SESSION_TIMEOUT=${AAL2_SESSION_TIMEOUT:-4h}
    volumes:
      # Mount config files
      - ${INSTALL_DIR}/kratos/identity.schema.sting.json:/etc/config/kratos/identity.schema.json:ro
      - ${INSTALL_DIR}/kratos/identity.schema.extended.json:/etc/config/kratos/identity.schema.extended.json:ro
      - ${INSTALL_DIR}/kratos/kratos.yml:/etc/config/kratos/kratos.yml:ro
      # Mount certificates for HTTPS
      - ./certs/server.crt:/etc/certs/server.crt:ro
      - ./certs/server.key:/etc/certs/server.key:ro
      # Mount courier templates
      - ./kratos/courier-templates:/etc/config/kratos/courier-templates:ro
      - sting_logs:/var/log/sting
    networks:
      sting_local:
        aliases:
          - kratos
    ports:
      - 4433:4433  # Public API
      - 4434:4434  # Admin API
    entrypoint: []
    command: sh -c "kratos migrate sql -e --yes && kratos serve all --dev --watch-courier --config /etc/config/kratos/kratos.yml"
    extra_hosts:
      - "host.docker.internal:host-gateway"  # This allows Kratos to reach the host machine
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      # Use the admin port for health checks (HTTPS)
      # Note: Using internal port (4434) for healthcheck, not the external port
      test: ["CMD-SHELL", "wget --no-check-certificate --no-verbose --spider https://localhost:4434/admin/health/ready || exit 1"]
      interval: ${HEALTH_CHECK_INTERVAL:-5s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-3s}
      retries: 30
      start_period: ${HEALTH_CHECK_START_PERIOD:-40s}

  app:
    container_name: sting-ce-app
    build:
      context: .
      dockerfile: app/Dockerfile.app
    image: sting-ce-app:latest
    env_file:
      - ${INSTALL_DIR}/env/app.env
      - ${INSTALL_DIR}/env/db.env
    environment:
      # Use dedicated app_user for application database access
      - DATABASE_URL=postgresql://app_user:app_secure_password_change_me@db:5432/sting_app?sslmode=disable
      - SQLALCHEMY_DATABASE_URI=postgresql://app_user:app_secure_password_change_me@db:5432/sting_app?sslmode=disable
      - DOMAIN_NAME=${DOMAIN_NAME:-localhost}
      - CERTBOT_EMAIL=${CERTBOT_EMAIL:-dev@localhost}
      - KNOWLEDGE_SERVICE_URL=http://knowledge:8090
      - KNOWLEDGE_ENABLED=true
      # Kratos URLs - use internal Docker network hostname
      - KRATOS_PUBLIC_URL=https://kratos:4433
      - KRATOS_ADMIN_URL=https://kratos:4434
    volumes:
      # Mount local app config
      - ./conf:/app/conf
      - sting_logs:/var/log/sting
      - sting_certs:/app/certs
      - /etc/letsencrypt:/etc/letsencrypt:ro
      # Mount install directory for admin credentials
      - ${INSTALL_DIR}:/.sting-ce
      # Mount Docker socket for Beeacon monitoring
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount knowledge directory for upload script access
      - ${INSTALL_DIR}/knowledge:/app/knowledge:ro
      # Mount scripts directory for upload functionality
      - ${INSTALL_DIR}/scripts:/app/scripts:ro
      # Persist uploaded files
      - sting_uploads:/tmp/sting_uploads
    networks:
      - sting_local
    ports:
      - ${FLASK_PORT:-5050}:5050
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 256M
    depends_on:
      vault:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      # This should use the internal container port (5050)
      # since the healthcheck runs INSIDE the container
      test: ["CMD", "curl", "-f", "-k", "https://localhost:5050/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-5s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-3s}
      retries: 30
      start_period: ${HEALTH_CHECK_START_PERIOD:-120s}

  # Minimal Report Worker - Lightweight worker that delegates to app service
  report-worker:
    container_name: sting-ce-report-worker
    build:
      context: .
      dockerfile: Dockerfile.minimal-worker
    image: sting-ce-minimal-report-worker:latest
    environment:
      # Only needs to know where the app service is
      - APP_SERVICE_URL=https://app:5050
    volumes:
      # Mount shared SSL certificates for HTTPS verification
      - sting_certs:/app/certs
    networks:
      - sting_local
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 32M
    depends_on:
      app:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python3", "-c", "from minimal_report_worker import health_check_main; health_check_main()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Profile Sync Worker - Manages user synchronization between Kratos and STING
  profile-sync-worker:
    container_name: sting-ce-profile-sync-worker
    build:
      context: .
      dockerfile: app/Dockerfile.app
    image: sting-ce-app:latest
    command: ["python3", "-m", "app.workers.profile_sync_worker"]
    env_file:
      - ${INSTALL_DIR}/env/app.env
      - ${INSTALL_DIR}/env/db.env
    environment:
      # Use dedicated app_user for application database access
      - DATABASE_URL=postgresql://app_user:app_secure_password_change_me@db:5432/sting_app?sslmode=disable
      - SQLALCHEMY_DATABASE_URI=postgresql://app_user:app_secure_password_change_me@db:5432/sting_app?sslmode=disable
      - WORKER_TYPE=profile_sync_worker
      - PROFILE_SYNC_ENABLED=true
      - PROFILE_SYNC_INTERVAL_MINUTES=5
      # Kratos URLs - use internal Docker network hostname
      - KRATOS_PUBLIC_URL=https://kratos:4433
      - KRATOS_ADMIN_URL=https://kratos:4434
      - KRATOS_VERIFY_SSL=false
    volumes:
      # Mount local app config
      - ./conf:/app/conf
      - sting_logs:/var/log/sting
      - sting_certs:/app/certs
      # Mount install directory for admin credentials
      - ${INSTALL_DIR}:/.sting-ce
    networks:
      - sting_local
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 64M
    depends_on:
      # Needs both Kratos and app for sync operations
      db:
        condition: service_healthy
      kratos:
        condition: service_healthy
      app:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python3", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  frontend:
    container_name: sting-ce-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.react-nginx
    image: sting-ce-frontend:latest
    env_file:
      - ${INSTALL_DIR}/env/frontend.env
    environment:
      REACT_APP_API_URL: "https://localhost:5050"
      REACT_APP_KRATOS_PUBLIC_URL: "https://localhost:4433"
      PUBLIC_URL: "/"
      # Pass environment variables for runtime substitution
      NODE_ENV: "production"
    volumes:
      - sting_certs:/etc/nginx/certs:ro
    networks:
      - sting_local
    ports:
      - ${REACT_PORT:-8443}:80
    depends_on:
      app:
        condition: service_healthy
      kratos:
        condition: service_healthy
      knowledge:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD-SHELL", "pgrep nginx || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 2
      start_period: 10s
    # Override the command from Dockerfile
    command: ["nginx", "-g", "daemon off;"]


  # Add these services to your docker-compose.yml

  mailpit:
    container_name: sting-ce-mailpit
    image: axllent/mailpit:v1.21.5
    # Only run in development mode
    profiles: ["development", "dev"]
    ports:
      - "127.0.0.1:1025:1025"  # SMTP port - localhost only
      - "127.0.0.1:8025:8026"  # Web UI port - localhost only
    volumes:
      - mailpit_data:/data
    environment:
      - MP_DATABASE=/data/mailpit.db
      - MP_SMTP_AUTH_ACCEPT_ANY=1
      - MP_SMTP_AUTH_ALLOW_INSECURE=1
      - TZ=UTC
    mem_limit: 128M
    cpus: 0.1
    mem_reservation: 32M
    networks:
      sting_local:
        aliases:
          - mailpit
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "1025"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  chroma:
    container_name: sting-ce-chroma
    image: chromadb/chroma:0.5.20
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - ANONYMIZED_TELEMETRY=false
      - ALLOW_RESET=true
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8000:8000"
    networks:
      sting_local:
        aliases:
          - chroma
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "timeout 2 bash -c '</dev/tcp/localhost/8000' || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
  knowledge:
    container_name: sting-ce-knowledge
    image: sting-ce-knowledge:latest
    build:
      context: ./knowledge_service
      dockerfile: Dockerfile
    env_file:
    - ${INSTALL_DIR}/env/knowledge.env
    environment:
    - PYTHONPATH=/app
    - KNOWLEDGE_PORT=8090
    - KNOWLEDGE_HOST=0.0.0.0
    - CHROMA_URL=http://chroma:8000
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.5'
        reservations:
          memory: 1G
    volumes:
    - ./conf:/app/conf
    - sting_logs:/var/log/sting
    - knowledge_data:/app/data
    - knowledge_uploads:/tmp/sting_uploads
    # Mount knowledge directory for access to documentation
    - ${INSTALL_DIR}/knowledge:/app/knowledge:ro
    ports:
    - 8090:8090
    networks:
      sting_local:
        aliases:
        - knowledge
    depends_on:
    - chroma
    healthcheck:
      test:
      - CMD
      - python
      - -c
      - import urllib.request; urllib.request.urlopen('http://localhost:8090/health')
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
  llm-gateway-proxy:
    container_name: sting-ce-llm-gateway-proxy
    image: nginx:1.27-alpine
    volumes:
    - ./nginx-llm-proxy.conf:/etc/nginx/nginx.conf:ro
    ports:
    - 8085:8080
    networks:
      sting_local:
        aliases:
        - llm-gateway
    mem_limit: 128M
    cpus: 0.1
    mem_reservation: 32M
    healthcheck:
      test:
      - CMD-SHELL
      - curl -sf http://localhost:8080/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    extra_hosts:
    - host.docker.internal:host-gateway
    restart: unless-stopped
  chatbot:
    container_name: sting-ce-chatbot
    build:
      context: .
      dockerfile: ./chatbot/Dockerfile
    image: sting-ce-chatbot:latest
    env_file:
    - ${INSTALL_DIR}/env/chatbot.env
    environment:
    - KNOWLEDGE_SERVICE_URL=http://knowledge:8090
    - KNOWLEDGE_ENABLED=true
    - CHATBOT_MODEL=phi3
    - NATIVE_LLM_URL=http://host.docker.internal:8086
    - MODEL_CLEANUP_INTERVAL=600
    - MAX_CONTEXT_LENGTH=4096
    - PHI3_MEMORY_OPTIMIZATION=true
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 512M
    volumes:
    - ./chatbot:/app/chatbot
    - ./llm_service/chat:/app/llm_service/chat
    - ./llm_service/filtering:/app/llm_service/filtering
    - ./conf:/app/conf
    ports:
    - 8081:8081
    - 8888:8888
    networks:
    - sting_local
    depends_on:
      messaging:
        condition: service_healthy
      kratos:
        condition: service_healthy
    healthcheck:
      test:
      - CMD-SHELL
      - curl -sf http://localhost:8888/health | grep -q '"service":"bee"' || exit 1
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: 30s
      retries: ${HEALTH_CHECK_RETRIES:-5}
      start_period: ${HEALTH_CHECK_START_PERIOD:-240s}
    restart: unless-stopped
    command: python chatbot/bee_server.py

  nectar-worker:
    container_name: sting-ce-nectar-worker
    build:
      context: .
      dockerfile: Dockerfile.nectar-worker
      args:
        CACHEBUST: ${CACHEBUST:-1}
        BUILD_DATE: ${BUILD_DATE:-2025-01-01T00:00:00Z}
    image: sting-ce-nectar-worker:latest
    env_file:
      - ${INSTALL_DIR}/env/nectar-worker.env
    environment:
      - OLLAMA_URL=http://host.docker.internal:11434
      - OLLAMA_KEEP_ALIVE=30m
    volumes:
      # Mount config for PII middleware
      - ./conf:/app/conf:ro
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
    networks:
      - sting_local
    depends_on:
      app:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9002/health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-10s}
      retries: ${HEALTH_CHECK_RETRIES:-3}
      start_period: ${HEALTH_CHECK_START_PERIOD:-40s}
    restart: unless-stopped

  messaging:
    container_name: sting-ce-messaging
    build:
      context: ./messaging_service
      dockerfile: Dockerfile
    image: sting-ce-messaging:latest
    environment:
    - MESSAGING_ENCRYPTION_ENABLED=true
    - MESSAGING_QUEUE_ENABLED=true
    - MESSAGING_NOTIFICATIONS_ENABLED=true
    - MESSAGING_STORAGE_BACKEND=postgresql
    - DATABASE_URL=postgresql://app_user:app_secure_password_change_me@db:5432/sting_messaging
    - REDIS_URL=redis://redis:6379
    - MAX_MESSAGE_SIZE=1048576
    - MESSAGE_RETENTION_DAYS=30
    volumes:
    - messaging_data:/app/data
    - ./messaging_service:/app
    ports:
    - 8889:8889
    networks:
      sting_local:
        aliases:
        - messaging
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test:
      - CMD-SHELL
      - curl -sf http://localhost:8889/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 64M
  redis:
    image: redis:7-alpine
    container_name: sting-ce-redis
    ports:
    - 6379:6379
    volumes:
    - redis_data:/data
    networks:
    - sting_local
    environment:
    - REDIS_MAXMEMORY=512mb
    - REDIS_MAXMEMORY_POLICY=allkeys-lru
    - REDIS_SAVE="900 1 300 10 60 10000"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
    healthcheck:
      test:
      - CMD
      - redis-cli
      - ping
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  external-ai:
    container_name: sting-ce-external-ai
    build:
      context: .
      dockerfile: ./external_ai_service/Dockerfile
    image: sting-ce-external-ai:latest
    env_file:
      - ${INSTALL_DIR}/env/external-ai.env
    ports:
    - 8091:8091
    volumes:
      # Mount config for PII middleware
      - ./conf:/app/conf:ro
    networks:
      sting_local:
        aliases:
        - external-ai
    extra_hosts:
    - "host.docker.internal:host-gateway"
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8091/health
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
    restart: unless-stopped

  # Public Bee Service - AI-as-a-Service Chat API
  public-bee:
    container_name: sting-ce-public-bee
    build:
      context: ./public_bee
      dockerfile: Dockerfile
    image: sting-ce-public-bee:latest
    environment:
      - PUBLIC_BEE_PORT=8092
      - PUBLIC_BEE_HOST=0.0.0.0
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@db:5432/${POSTGRES_DB:-sting_app}
      - EXTERNAL_AI_URL=http://external-ai:8091
      - CHATBOT_URL=http://chatbot:8888
      - KNOWLEDGE_SERVICE_URL=http://knowledge:8090
    ports:
      - "8092:8092"
    networks:
      sting_local:
        aliases:
          - public-bee
    depends_on:
      db:
        condition: service_healthy
      external-ai:
        condition: service_healthy
      chatbot:
        condition: service_healthy
    volumes:
      - public_bee_logs:/var/log/public-bee
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8092/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
    restart: unless-stopped

  # Observability Stack - Vault-First Approach
  loki:
    container_name: sting-ce-loki
    image: grafana/loki:3.0.0
    env_file:
      - ${INSTALL_DIR}/env/observability.env
    environment:
      - LOKI_CONFIG_FILE=/etc/loki/loki.yml
    volumes:
      - ./observability/loki/config/loki.yml:/etc/loki/loki.yml:ro
      - loki_data:/loki
      - sting_logs:/var/log/sting
    ports:
      - "3100:3100"
    networks:
      sting_local:
        aliases:
          - loki
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  promtail:
    container_name: sting-ce-promtail
    build:
      context: ./observability/promtail
      dockerfile: Dockerfile
    image: sting-ce-promtail:latest
    command: ["-config.file=/etc/promtail/promtail.yml"]
    env_file:
      - ${INSTALL_DIR}/env/observability.env
    environment:
      - PROMTAIL_CONFIG_FILE=/etc/promtail/promtail.yml
    volumes:
      - ./observability/promtail/config/promtail.yml:/etc/promtail/promtail.yml:ro
      # Mount centralized STING logs directory
      - sting_logs:/var/log/sting:ro
      # Mount Docker socket for container log collection
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - sting_local
    depends_on:
      loki:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD-SHELL", "pgrep promtail || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  grafana:
    container_name: sting-ce-grafana
    image: grafana/grafana:11.0.0
    env_file:
      - ${INSTALL_DIR}/env/observability.env
    environment:
      # Vault-referenced credentials with fallbacks to suppress warnings
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-changeme}
      # Grafana configuration
      - GF_PATHS_CONFIG=/etc/grafana/grafana.ini
      - GF_PATHS_DATA=/var/lib/grafana
      - GF_PATHS_HOME=/usr/share/grafana
      - GF_PATHS_LOGS=/var/log/grafana
      - GF_PATHS_PLUGINS=/var/lib/grafana/plugins
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      # Anonymous access for embedded dashboards (other security settings in observability.env)
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      # Disable external features for privacy
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_SNAPSHOTS_EXTERNAL_ENABLED=false
    volumes:
      - ./observability/grafana/config/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./observability/grafana/provisioning:/etc/grafana/provisioning:ro
      - grafana_data:/var/lib/grafana
      - sting_logs:/var/log/sting
    ports:
      - "3001:3000"  # Changed to avoid conflict with frontend port 3000
    networks:
      sting_local:
        aliases:
          - grafana
    depends_on:
      loki:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Log forwarder to stream Docker container logs to files for Promtail
  log-forwarder:
    container_name: sting-ce-log-forwarder
    image: alpine:3.18
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - container_logs:/var/log/containers
    command: >
      sh -c '
        echo "Installing Docker client and setting up log forwarder..."
        sed -i "s/https/http/g" /etc/apk/repositories 2>/dev/null || true
        apk add --no-cache docker-cli curl || (apk update && apk add --no-cache docker-cli curl)
        
        echo "Starting log forwarder for STING containers..."
        
        # Create log files
        mkdir -p /var/log/containers
        touch /var/log/containers/app.log
        touch /var/log/containers/knowledge.log
        touch /var/log/containers/chatbot.log
        touch /var/log/containers/kratos.log
        
        # Start log forwarding in background
        (docker logs -f sting-ce-app 2>&1 | while read line; do echo "$(date -Iseconds) [app] $$line"; done >> /var/log/containers/app.log) &
        (docker logs -f sting-ce-knowledge 2>&1 | while read line; do echo "$(date -Iseconds) [knowledge] $$line"; done >> /var/log/containers/knowledge.log) &
        (docker logs -f sting-ce-chatbot 2>&1 | while read line; do echo "$(date -Iseconds) [chatbot] $$line"; done >> /var/log/containers/chatbot.log) &
        (docker logs -f sting-ce-kratos 2>&1 | while read line; do echo "$(date -Iseconds) [kratos] $$line"; done >> /var/log/containers/kratos.log) &
        
        echo "Log forwarders started, keeping container alive..."
        while true; do sleep 60; done
      '
    mem_limit: 256M
    cpus: 0.1
    mem_reservation: 64M
    networks:
      - sting_local
    restart: unless-stopped

  # Headscale - Self-hosted coordination server for support tunnels
  headscale:
    container_name: sting-ce-headscale
    image: headscale/headscale:0.23.0
    command: serve
    env_file:
      - ${INSTALL_DIR}/env/headscale.env
    environment:
      - HEADSCALE_DATABASE_TYPE=sqlite
      - HEADSCALE_DATABASE_SQLITE_PATH=/var/lib/headscale/db.sqlite
      - HEADSCALE_EPHEMERAL_NODE_INACTIVITY_TIMEOUT=30m
      - HEADSCALE_BASE_DOMAIN=support.sting.local
      - HEADSCALE_LISTEN_ADDR=0.0.0.0:8070
      - HEADSCALE_METRICS_LISTEN_ADDR=0.0.0.0:9090
    volumes:
      - ./conf/headscale:/etc/headscale:ro
      - headscale_data:/var/lib/headscale
      - headscale_logs:/var/log/headscale
    ports:
      - "8070:8070"  # Headscale web interface (avoiding 8080 conflict)
      - "9090:9090"  # Metrics endpoint
    networks:
      sting_local:
        aliases:
          - headscale
    depends_on:
      vault:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "headscale", "version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    profiles:
      - support-tunnels
      - full

networks:
  sting_local:
    external: true
volumes:
  registry_data:
    driver: local
  config_data:
    external: true
  sting-ce_postgres_data:
    driver: local
  vault_data:
    external: true
  vault_file:
    external: true
  vault_persistent:
    external: true
  vault_logs:
    external: true
  sting_uploads:
    driver: local
  sting_logs:
    external: true
  sting_certs:
    external: true
    name: sting_certs
  llm_logs:
    external: true
  mailpit_data:
    external: false
  messaging_data:
    external: false
  redis_data:
    external: false
  chroma_data:
    external: false
  knowledge_data:
    external: false
  knowledge_uploads:
    external: false
  profile_logs:
    external: false
  # Observability volumes
  loki_data:
    external: false
  grafana_data:
    external: false
  container_logs:
    external: false
  # Build Intelligence & Security volumes
  build_logs:
    external: false
  build_analytics:
    external: false
  # Public Bee service logs
  public_bee_logs:
    external: false
  # Headscale support tunnel volumes
  headscale_data:
    external: false
  headscale_logs:
    external: false
